threagile_version: 1.0.0

title: "Threat Model for TestingApp REST Service"
date: "2025-08-20"

author:
  name: "Automated Analysis"

business_criticality: critical

management_summary_comment: >
  This threat model describes a REST service for processing and storing game results.
  The service is containerized and consists of a Java backend and a PostgreSQL database.
  The primary assets are the game results stored in the database.

tags_available:
  - java
  - spring-boot
  - postgresql
  - docker
  - web-client
  - game-results

data_assets:
  game-results:
    id: game-results
    description: "Stores the game results and related data."
    usage: business
    tags:
      - game-results
    origin: "TestingApp API"
    owner: "Application Team"
    quantity: many
    confidentiality: confidential
    integrity: critical
    availability: critical
    justification_cia_rating: >
      Game results are critical for the service's function and must be accurate and secure.

technical_assets:
  web-client:
    id: web-client
    description: "Any external client (e.g., curl, Postman, web browser) calling the API."
    type: external-entity
    usage: business
    technology: browser
    tags:
      - web-client
    internet: true
    machine: physical
    encryption: none
    size: component
    owner: "End User"
    out_of_scope: true
    justification_out_of_scope: "The client is owned and managed by the end-user."
    confidentiality: public
    integrity: operational
    availability: operational
    justification_cia_rating: "The client is out of scope and managed by the end-user."
    communication_links:
      api-call:
        target: testingapp-api
        description: "API call to process game results."
        protocol: https
        authentication: none
        authorization: none
        usage: business
        data_assets_sent:
          - game-results
        data_assets_received:
          - game-results

  testingapp-api:
    id: testingapp-api
    description: "Spring Boot API for results."
    type: process
    usage: business
    technology: application-server
    tags:
      - java
      - spring-boot
      - docker
    internet: false
    machine: container
    encryption: none
    size: component
    owner: "Application Team"
    custom_developed_parts: true
    confidentiality: confidential
    integrity: critical
    availability: critical
    justification_cia_rating: "The API processes all data and is the core of the service."
    data_assets_processed:
      - game-results
    communication_links:
      jdbc-connection:
        target: testingapp-db
        description: "Stores and retrieves game results."
        protocol: jdbc
        authentication: none
        authorization: none
        usage: business
        data_assets_sent:
          - game-results
        data_assets_received:
          - game-results

  testingapp-db:
    id: testingapp-db
    description: "PostgreSQL database for storing game results."
    type: datastore
    usage: business
    technology: database
    tags:
      - postgresql
      - docker
    internet: false
    machine: container
    encryption: transparent
    size: component
    owner: "Application Team"
    confidentiality: confidential
    integrity: critical
    availability: critical
    justification_cia_rating: "The database stores all sensitive game results."
    data_assets_stored:
      - game-results

trust_boundaries:
  internet-boundary:
    id: internet-boundary
    description: "The public internet, where clients reside."
    type: network-cloud-security-group
    technical_assets_inside:
      - web-client
    trust_boundaries_nested:
      - docker-net

  docker-net:
    id: docker-net
    description: "The internal Docker network that isolates the application and database."
    type: network-cloud-security-group
    technical_assets_inside:
      - testingapp-api
      - testingapp-db

shared_runtimes:
  docker-environment:
    id: docker-environment
    description: "The Docker host environment where all containers run."
    technical_assets_running:
      - testingapp-api
      - testingapp-db

individual_risk_categories: {}

risk_tracking: {}